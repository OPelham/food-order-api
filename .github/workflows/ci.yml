name: 🚦 CI Pipeline

on:
  push:
    branches: ['feature/**']
  pull_request:
    branches: [release, develop]

jobs:
  scan:
    name: 🔍 Scan Code
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🚨 Audit dependencies
        run: npm audit --audit-level=high || exit 1

      - name: 🧠 CodeQL Init
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: 🧠 CodeQL Analyze
        uses: github/codeql-action/analyze@v2

  lint-and-test:
    name: 🧪 Lint & Test
    runs-on: ubuntu-latest
    needs: scan

    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Install Docker Compose (if needed)
        run: |
          if ! command -v docker-compose &> /dev/null; then
            curl -SL https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-linux-x86_64 \
              -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
          fi

      - name: 🧱 Build and start services
        run: docker compose up -d --build

      - name: 🕒 Wait for Postgres to be ready
        run: |
          echo "Waiting for Postgres..."
          until docker exec $(docker compose ps -q postgres) pg_isready -U testuser; do sleep 1; done

      - name: ✅ Run tests in container
        run: docker compose run --rm api npm test

      - name: 🔻 Shut down containers
        run: docker compose down

      - name: 🐳 Build production Docker image
        run: docker build -t my-api-app:prod -f Dockerfile .

      - name: 📷 Show built image info
        run: docker images my-api-app:prod

#  docker:
#    name: 🐳 Build & Push Docker Image
#    runs-on: ubuntu-latest
#    needs: test
#
#    steps:
#      - name: 📥 Checkout code
#        uses: actions/checkout@v4
#
#      - name: 🏷️ Get version from package.json and branch name
#        id: meta
#        run: |
#          VERSION=$(node -p "require('./package.json').version")
#          BRANCH=${GITHUB_REF##*/}
#          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
#          echo "BRANCH=$BRANCH" >> $GITHUB_OUTPUT
#          echo "TAG=my-api-${BRANCH}-${VERSION}" >> $GITHUB_OUTPUT
#
#      - name: 🔐 Log in to DockerHub (or GHCR)
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.REGISTRY_USERNAME }}
#          password: ${{ secrets.REGISTRY_PASSWORD }}
#
#      - name: 🐳 Build and tag Docker image
#        run: |
#          docker build -t my-api:${{ steps.meta.outputs.TAG }} .
#          docker tag my-api:${{ steps.meta.outputs.TAG }} your-registry.com/your-user/my-api:${{ steps.meta.outputs.TAG }}
#
#      - name: 🚀 Push Docker image
#        run: |
#          docker push your-registry.com/your-user/my-api:${{ steps.meta.outputs.TAG }}