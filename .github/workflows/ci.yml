name: 🚦 CI Pipeline

on:
  push:
    branches: ['feature/**']
  pull_request:
    branches: ["release/**", develop, main]

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  scan:
    name: 🔍 Scan Code
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🚨 Audit dependencies
        run: npm audit --audit-level=high || exit 1

      - name: 🧠 CodeQL Init
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 🧱 CodeQL Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 🧠 CodeQL Analyze
        uses: github/codeql-action/analyze@v3

  lint-and-test:
    name: 🧪 Lint & Test
    runs-on: ubuntu-latest

    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Install Docker Compose (if needed)
        run: |
          if ! command -v docker-compose &> /dev/null; then
            curl -SL https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-linux-x86_64 \
              -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
          fi

      - name: 🧱 Build and start services
        run: docker compose up -d --build

      - name: 🕒 Wait for Postgres to be ready
        run: |
          echo "Waiting for Postgres..."
          until docker exec $(docker compose ps -q postgres) pg_isready -U testuser; do sleep 1; done

      - name: ✅ Run tests in container
        run: docker compose run --rm api npm test

      - name: 🔻 Shut down containers
        run: docker compose down

  docker:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [scan, lint-and-test]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: 🛠️ Extract metadata from package.json
        id: meta
        run: |
          NAME=$(node -p "require('./package.json').name")
          VERSION=$(node -p "require('./package.json').version")
          RAW_BRANCH=${GITHUB_REF#refs/heads/}
          BRANCH_PREFIX=${RAW_BRANCH%%/*}
          SHORT_SHA=${GITHUB_SHA::7}
          
          IMAGE_TAG=${BRANCH_PREFIX}-${VERSION}-${SHORT_SHA}
          
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: 🔐 Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: 🐳 Build Docker image
        run: |
          docker build -t ${{ steps.meta.outputs.name }}:${{ steps.meta.outputs.tag }} .

      - name: 🚀 Push Docker image
        run: |
          docker tag ${{ steps.meta.outputs.name }}:${{ steps.meta.outputs.tag }} \
            docker.io/${{ secrets.REGISTRY_USERNAME }}/${{ steps.meta.outputs.name }}:${{ steps.meta.outputs.tag }}
          docker push docker.io/${{ secrets.REGISTRY_USERNAME }}/${{ steps.meta.outputs.name }}:${{ steps.meta.outputs.tag }}