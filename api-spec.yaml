openapi: 3.1.0
info:
  title: Food Orders API
  description: |-
    Food Orders API for managing ingredients, menu items, and orders.
#
#    Security:
#    Oauth 2
  version: 1.0.0
#  termsOfService: https://swagger.io/terms/
  contact:
    email: oliverpelhamdev@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
#externalDocs:
#  description: Find out more about Swagger
#  url: https://swagger.io
servers:
  - url: https://oliverpelham.dev/food-orders/api/v1
tags:
  - name: ingredients
    description: Manage ingredient items
  - name: menu-items
    description: Manage menu items
  - name: orders
    description: Manage orders
paths:
  /ingredients:
    post:
      tags:
        - ingredients
      summary: Add a New Ingredient.
      description: Add a new ingredient type to inventory.
      operationId: addIngredients
      parameters:
        - $ref: '#/components/parameters/CorrelationIdHeader'
      requestBody:
        description: Create a new ingredient in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ingredient'
        required: true
      responses:
        '200': #todo refactor to 201 and return only id?
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'
        '400':
          $ref: "#/components/schemas/Error400"
        '401':
          $ref: "#/components/schemas/Error401"
        '404':
          $ref: "#/components/schemas/Error404"
        '500':
          $ref: "#/components/schemas/Error500"

#      security:
#        - food_orders_auth:
#            - write:ingredients
#            - read:ingredients
          
  /ingredients/findByAvailability:
    get:
      tags:
        - ingredients
      summary: Find Ingredients by Availability Status.
      description: Multiple tags can be provided with comma separated strings. Use "?availability=UNAVAILABLE,AVAILABLE".
      operationId: findIngredientsByAvailability
      parameters:
        - $ref: '#/components/parameters/CorrelationIdHeader'
        - name: availability
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: false #todo check this 
          schema:
            type: string
            default: AVAILABLE
            enum:
              - AVAILABLE
              - UNAVAILABLE
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient' #todo refactor as list
        '400':
          $ref: "#/components/schemas/Error400"
        '401':
          $ref: "#/components/schemas/Error401"
        '404':
          $ref: "#/components/schemas/Error404"
        '500':
          $ref: "#/components/schemas/Error500"

#      security:
#        - food_orders_auth:
#            - read:ingredients
  
  /ingredients/{ingredientId}:
    get:
      tags:
        - ingredients
      summary: Get an Ingredient by ID.
      description: Returns a single ingredient.
      operationId: getIngredientById
      parameters:
        - $ref: '#/components/parameters/CorrelationIdHeader'
        - $ref: '#/components/parameters/IngredientId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'
        '400':
          $ref: "#/components/schemas/Error400"
        '401':
          $ref: "#/components/schemas/Error401"
        '404':
          $ref: "#/components/schemas/Error404"
        '500':
          $ref: "#/components/schemas/Error500"
#      security:
#        - food_orders_auth:
#            - read:ingredients
            
    put:
      tags:
        - ingredients
      summary: Update Ingredient by ID.
      description: Edit an ingredient type.
      operationId: updateIngredient
      parameters:
        - $ref: '#/components/parameters/CorrelationIdHeader'
        - $ref: '#/components/parameters/IngredientId'
      requestBody:
        description: Update an existing ingredient
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ingredient'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'
        '400':
          $ref: "#/components/schemas/Error400"
        '401':
          $ref: "#/components/schemas/Error401"
        '404':
          $ref: "#/components/schemas/Error404"
        '500':
          $ref: "#/components/schemas/Error500"
    
    delete:
      tags:
        - ingredients
      summary: Deletes an Ingredient by ID.
      description: Delete an ingredient.
      operationId: deleteIngredient
      parameters:
        - $ref: '#/components/parameters/CorrelationIdHeader'
#        - name: api_key
#          in: header
#          description: ''
#          required: false
#          schema:
#            type: string
        - $ref: '#/components/parameters/IngredientId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'
        '400':
          $ref: "#/components/schemas/Error400"
        '401':
          $ref: "#/components/schemas/Error401"
        '404':
          $ref: "#/components/schemas/Error404"
        '500':
          $ref: "#/components/schemas/Error500"
#      security:
#        - petstore_auth:
#            - write:pets
#            - read:pets
  
components:
  schemas:
    Ingredient:
      required: # todo find out about mandatory for response fields
        - ingredientId
        - name
        - quantity
        - category
      type: object
      properties:
        ingredientId:
          type: string
          description: Unique identifier of this ingredient.
          readOnly: true
          format: uuid
          example: 07a58bdc-555a-4980-b779-355fc7e27cb5
        name:
          type: string
          example: tomato
        quantity:
          type: integer
          example: 28
        category:
          type: string
          description: Storage Category of this ingredient
          enum:
            - FROZEN
            - CHILLED
            - DRY_GOOD
        availability:
          type: string
          description: System generated availability status.
          readOnly: true
          enum:
            - AVAILABLE
            - UNAVAILABLE

    Error:
      type: object
      properties:
        message:
          type: string
        error:
          type: string
        statusCode:
          type: number
      required:
        - message
        - error
        - statusCode

    Error400:
      description: Invalid input
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            {
              "message": "Bad Request",
              "error": "BadRequestError",
              "statusCode": 400
            }
    Error401:
      description: Unauthorised
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            {
              "message": "Unauthorized",
              "error": "UnauthorizedError",
              "statusCode": 401
            }
    Error404:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            {
              "message": "Not Found",
              "error": "NotFoundError",
              "statusCode": 404
            }
    Error500:
      description: General error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            {
              "message": "Internal Server Error",
              "error": "InternalServerError",
              "statusCode": 500
            }

  examples:
    Error400:
      summary: A 400 error
      value:
        {
          "message": "Bad Request",
          "error": "BadRequestError",
          "statusCode": 400
        }
    Error401:
      summary: A 401 error
      value:
        {
          "message": "Unauthorized",
          "error": "UnauthorizedError",
          "statusCode": 401
        }
    Error404:
      summary: A 404 error
      value:
        {
          "message": "Not Found",
          "error": "NotFoundError",
          "statusCode": 404
        }
    Error500:
      summary: A 500 error
      value:
        {
          "message": "Internal Server Error",
          "error": "InternalServerError",
          "statusCode": 500
        }

  parameters:
    CorrelationIdHeader:
      name: correlation-id
      in: header
      required: true
      description: A UUID used for request tracing.
      example: a58bdc-555a-4980-b779-355fc7e27cb5
      schema:
        type: string
        format: uuid

    IngredientId:
      name: ingredientId
      in: path
      description: This ingredients ID
      required: true
      example: a58bdc-555a-4980-b779-355fc7e27cb5
      schema:
        type: string
        format: uuid

#  securitySchemes:
#    food_orders_auth:
#      type: oauth2
#      flows:
#        implicit:
#          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
#          scopes:
#            "write:ingredients": modify pets in your account
#            "read:ingredients": read your pets
#    api_key:
#      type: apiKey
#      name: api_key
#      in: header